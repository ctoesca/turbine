/// <reference types="bluebird" />
import { TdaoBase } from './TdaoBase';
import Promise = require("bluebird");
export declare class TdaoMysql extends TdaoBase {
    table: string;
    viewTable: string;
    IDField: string;
    IDFieldIsAuto: boolean;
    IDFieldType: string;
    cache: any;
    tablefieldsByName: any;
    viewtablefieldsByName: any;
    connections: number;
    poolname: any;
    static pool: any;
    constructor(objectClassName: any, datasource: any, config: any);
    init(): Promise<any>;
    pad(number: any): any;
    getMysqDateFromDate(d: any): string;
    getPool(): any;
    getConnection(): Promise<{}>;
    releaseConnection(connection: any): void;
    beginTransaction(connection: any): Promise<{}>;
    commitTransaction(connection: any): Promise<{}>;
    rollbackTransaction(connection: any): Promise<{}>;
    queryTransaction(sql: any): Promise<{}>;
    query(sql: any): Promise<{}>;
    _query(sql: any, connection: any): Promise<{}>;
    execSelectQuery(sql: any): Promise<{}>;
    select(opt?: any): Promise<{}>;
    selectOne(opt: any): Promise<any>;
    empty(success: any, failure: any): Promise<{}>;
    getFields(type: any, opt?: any): Promise<any>;
    getByIds(idList: any, opt: any): Promise<{}>;
    getById(id: any): Promise<any>;
    delete(opt: any): Promise<{}>;
    deleteById(id: any, opt: any): Promise<{}>;
    save(obj: any, opt?: {}): Promise<{}>;
    escapeSqlString(v: any): any;
    getReplaceSql(obj: any): string;
    getUpdateSql(obj: any): string;
    getInsertSql(obj: any): string;
    _create(obj: any, opt?: {}): Promise<{}>;
    _update(obj: any, opt?: {}): Promise<{}>;
    getIds(obj: any): any[];
    getRecordsCount(where: any): Promise<{}>;
    getSearchQuery(opt: any): Promise<{}>;
    search(opt: any): Promise<{}>;
    _processObjects(objects: any, fields: any): Promise<{}>;
    processObjects(objects: any, fields: any): Promise<any>;
    onConnectionOpen(err: any): void;
    onConnectionClosed(err: any): void;
    onConnectionError(err: any): void;
}
