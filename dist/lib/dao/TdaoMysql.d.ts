import { TdaoBase } from './TdaoBase';
export declare class TdaoMysql extends TdaoBase {
    db: any;
    config: any;
    table: string;
    viewTable: string;
    IDField: string;
    IDFieldIsAuto: boolean;
    IDFieldType: string;
    cache: any;
    tablefieldsByName: any;
    viewtablefieldsByName: any;
    connections: number;
    poolname: any;
    logger: any;
    static pool: any;
    constructor(db: any, config: any);
    init(): any;
    pad(number: any): any;
    getMysqDateFromDate(d: any): string;
    getPool(): any;
    getConnection(): any;
    releaseConnection(connection: any): void;
    beginTransaction(connection: any): any;
    commitTransaction(connection: any): any;
    rollbackTransaction(connection: any): any;
    queryTransaction(sql: any): any;
    query(sql: any): any;
    _query(sql: any, connection: any): any;
    execSelectQuery(sql: any): any;
    select(opt: any): any;
    selectOne(opt: any): any;
    empty(success: any, failure: any): any;
    getFields(type: any, opt?: any): any;
    getByIds(idList: any, opt: any): any;
    getById(id: any): any;
    delete(opt: any): any;
    deleteById(id: any, opt: any): any;
    save(obj: any, opt?: {}): any;
    escapeSqlString(v: any): any;
    getReplaceSql(obj: any): string;
    getUpdateSql(obj: any): string;
    getInsertSql(obj: any): string;
    _create(obj: any, opt?: {}): any;
    _update(obj: any, opt?: {}): any;
    getIds(obj: any): any[];
    getRecordsCount(where: any): any;
    getSearchQuery(opt: any): any;
    search(opt: any): any;
    _processObjects(objects: any, fields: any): any;
    processObjects(objects: any, fields: any): any;
    onConnectionOpen(err: any): void;
    onConnectionClosed(err: any): void;
    onConnectionError(err: any): void;
}
